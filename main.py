import logging
from telegram.ext import Application, ApplicationBuilder, MessageHandler, filters, CommandHandler
from telegram import ReplyKeyboardMarkup
from random import randrange


BOT_TOKEN = "6932663581:AAEYHy1nX__cQTiPy_bhngU4QqKe_6-RFtk"
TIMER = 5
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)
logger = logging.getLogger(__name__)
reply_keyboard_0 = [['/start']]
markup_0 = ReplyKeyboardMarkup(reply_keyboard_0, resize_keyboard=True)
reply_keyboard_1 = [['/help']]
markup_1 = ReplyKeyboardMarkup(reply_keyboard_1, resize_keyboard=True)
reply_keyboard_2 = [['–ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å?', '–°–¥–µ–ª–∞–π —Ñ–æ–Ω—Ç–∞–Ω—á–∏–∫!!!', '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'], ['/help']]
markup_2 = ReplyKeyboardMarkup(reply_keyboard_2, one_time_keyboard=False, resize_keyboard=True)
reply_keyboard_3 = [['–ì–¥–µ —Ç—ã —Å–µ–π—á–∞—Å?', '–°–∫–æ–ª—å–∫–æ —Ç—ã –∂–∏–≤—ë—à—å?', '–ë—ã–≤–∞–ª –ª–∏ —Ç—ã –≤ –∫–æ—Å–º–æ—Å–µ?'], ['/help']]
markup_3 = ReplyKeyboardMarkup(reply_keyboard_3, one_time_keyboard=False, resize_keyboard=True)
reply_keyboard_4 = [['/fountains', '/no_fountains'], ['/help']]
markup_4 = ReplyKeyboardMarkup(reply_keyboard_4, one_time_keyboard=False, resize_keyboard=True)


async def start(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    print(user.mention_html())
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –∫–∏—Ç, —á—Ç–æ –ø–ª–∞–≤–∞–µ—Ç –≤—Å–µ–≥–¥–∞ –∏ –≤–µ–∑–¥–µ.", reply_markup=markup_1)


async def help_command(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help"""
    t = open('text.txt', 'r', encoding="utf-8").read()
    print(t)
    await update.message.reply_text(t, reply_markup=markup_2)


async def echo(update, context):
    t = update.message.text.lower()
    if '–∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å' in t:
        await update.message.reply_text('–ú–Ω–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:', reply_markup=markup_3)
    elif '–≥–¥–µ —Ç—ã —Å–µ–π—á–∞—Å' in t:
        n = randrange(0, 6)
        d = {0: ['–ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º', '-23.412101%2C-37.618230', '50,50'],
            1: ['–ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º', '-33.693802%2C23.218821', '40,40'],
            2: ['–¢–∏—Ö–æ–º', '-156.351156%2C-0.498715', '80,80'],
            3: ['–ò–Ω–¥–∏–π—Å–∫–æ–º', '70.624346%2C-24.028618', '50,50'],
            4: ['–Æ–∂–Ω–æ–º', '-159.823463%2C-69.439980', '15,15'],
            5: ['–°–µ–≤–µ—Ä–Ω–æ–º –õ–µ–¥–æ–≤–∏—Ç–æ–º', '-154.399270%2C72.573089', '25,25'],
            }
        ocean = d[n]
        static_api_request = f"http://static-maps.yandex.ru/1.x/?ll={ocean[1]}&spn={ocean[2]}&l=map"
        await context.bot.send_photo(
            update.message.chat_id,  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞. –ö—É–¥–∞ –ø–æ—Å—ã–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É.
            # –°—Å—ã–ª–∫–∞ –Ω–∞ static API, –ø–æ —Å—É—Ç–∏, —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É.
            # –¢–µ–ª–µ–≥—Ä–∞–º—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä—è–º–æ –µ—ë, –Ω–µ —Å–∫–∞—á–∏–≤–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ä—Ç—É.
            static_api_request,
            caption=f"–°–µ–π—á–∞—Å —è –≤ {ocean[0]} –æ–∫–µ–∞–Ω–µ"
            )
    elif '—Å–∫–æ–ª—å–∫–æ —Ç—ã –∂–∏–≤—ë—à—å' in t:
        await update.message.reply_text('''–û–û–û–û–û–û–û–û –º–æ–π –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! –ñ–∏–≤—É —è –æ—á–µ–Ω—å –∏ –æ—á–µ–Ω—å –¥–æ–ª–≥–æ...
–ù–∞—Å—Ç–æ–ª—å–∫–æ –¥–æ–ª–≥–æ —á—Ç–æ —Å–∞–º —Å–±–∏–ª—Å—è —Å–æ —Å—á—ë—Ç—É...''')
    elif '–±—ã–≤–∞–ª –ª–∏ —Ç—ã –≤ –∫–æ—Å–º–æ—Å–µ' in t:
        await update.message.reply_text('''–ë—ã–≤–∞–ª! –ï—â—ë –∫–∞–∫ –±—ã–≤–∞–ª!!! –ì–¥–µ –∂–µ —Ç–æ–ª–∫–æ —è –Ω–µ –±—ã–ª...''')
    elif '—Å–¥–µ–ª–∞–π —Ñ–æ–Ω—Ç–∞–Ω' in t:
        await update.message.reply_text('''–¢—ã —Ä–µ—à–∏–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –º–æ–π —Ñ–æ–Ω—Ç–∞–Ω—á–∏–∫?
–ù—É —á—Ç–æ –∂, —Ç–µ–ø–µ—Ä—å —Ñ–æ–Ω—Ç–∞–Ω—á–∏–∫ –±—É–¥–µ—Ç –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ —Ç—ã –º–µ–Ω—è –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—à—å''', reply_markup=markup_4)
    elif '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è' in t or '–ø–æ–∫–∞' in t and len(t) <= 10:
        await update.message.reply_text('''–î–æ —Å–≤–∏–¥–∞–Ω–∏—è –º–æ–π –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!''', reply_markup=markup_0)
    else:
        await update.message.reply_text(update.message.text)


def remove_job_if_exists(name, context):
    """–£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ –∏–º–µ–Ω–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."""
    current_jobs = context.job_queue.get_jobs_by_name(name)
    if not current_jobs:
        return False
    for job in current_jobs:
        job.schedule_removal()
    return True


# –û–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–∞–∫ –∏ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Ä–∞–Ω—å—à–µ.
async def set_timer(update, context):
    """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å"""
    chat_id = update.effective_message.chat_id
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
    # –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞)
    job_removed = remove_job_if_exists(str(chat_id), context)
    context.job_queue.run_repeating(task, TIMER, chat_id=chat_id, name=str(chat_id), data=TIMER)

    text = 'üê≥'
    if job_removed:
        text = '–§–æ–Ω—Ç–∞–Ω—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã'
    await update.effective_message.reply_text(text)


async def task(context):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await context.bot.send_message(context.job.chat_id, text='üê≥')


async def unset(update, context):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª"""
    chat_id = update.message.chat_id
    job_removed = remove_job_if_exists(str(chat_id), context)
    text = '–§–æ–Ω—Ç–∞–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' if job_removed else '–§–æ–Ω—Ç–∞–Ω—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã!'
    await update.message.reply_text(text)


def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("fountains", set_timer))
    application.add_handler(CommandHandler("no_fountains", unset))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    application.run_polling()


if __name__ == '__main__':
    main()
